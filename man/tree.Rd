% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tree.R
\name{tree}
\alias{tree}
\title{Pretty tree-like object printing}
\usage{
tree(
  el,
  ...,
  index_arraylike = TRUE,
  max_depth = Inf,
  val_printer = crayon::blue,
  class_printer = crayon::silver,
  show_attributes = FALSE,
  char_vertical = "│",
  char_horizontal = "─",
  char_branch = "├",
  char_final_branch = "└",
  char_vertical_attr = "┊",
  char_horizontal_attr = "┄"
)
}
\arguments{
\item{index_arraylike}{Should children of containers without names have
indices used as stand-in?}

\item{max_depth}{How far down the tree structure should be printed. E.g. \code{1}
means only direct children of the root element will be shown. Useful for
very deep lists.}

\item{val_printer}{Function that values get passed to before being drawn to
screen. Can be used to color or generally style output.}

\item{class_printer}{Same as \code{val_printer} but for the the class types of
non-atomic tree elements.}

\item{show_attributes}{Should attributes be printed as a child of the list or
avoided?}

\item{char_vertical, char_horizontal, char_branch, char_final_branch, char_vertical_attr, char_horizontal_attr}{Unicode characters used to construct the tree. Typically you wont want to
change these.}

\item{x}{A tree like object (list, etc.)}
}
\value{
console output of structure
}
\description{
A cleaner and easier to read replacement for \code{str} for nested list-like objects
}
\examples{

x <- list(
list(id = "a",
     val = 2),
list(id = "b",
     val = 1,
     children = list(
       list(id = "b1",
            val = 2.5),
       list(id = "b2",
            val = 8,
            children = list(
              list(id = "b21",
                   val = 4)
            )))),
list(id = "c",
     val = 8,
     children = list(
       list(id = "c1"),
       list(id = "c2",
            val = 1))))

# Basic usage
tree(x)

# Even cleaner output can be achieved by not printing indices
tree(x, index_arraylike = FALSE)

# Limit depth if object is potentially very large
tree(x, max_depth = 2)

# You can customize how the values and classes are printed if desired
tree(x, val_printer = function(x){paste0("_", x, "_")})

}
