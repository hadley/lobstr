% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inspect.R
\name{obj_inspect}
\alias{obj_inspect}
\title{Inspect an object}
\usage{
obj_inspect(x, expand = character())
}
\arguments{
\item{x}{Object to inspect}

\item{expand}{Optionally, expand "character" vectors (to see the underlying
entries in the global string pool), "environments" (to see the underlying
hashtables), and/or "altrep" objects (to see the underlying data).}
}
\description{
\code{obj_inspect(x)} is similar to \code{.Internal(inspect(x))}. The main difference
is the output is a little more compact, it recurses fully, and avoids
getting stuck in infinite loops by using a depth-first search. It also
returns a list that you can compute with, and carefully uses colour to
highlight the most important details.
}
\examples{
x <- list(
  TRUE,
  1L,
  runif(100),
  "3"
)
obj_inspect(x)

# Expand "character" to see underlying CHARSXP entries in the global
# string pool
x <- c("banana", "banana", "apple", "banana")
obj_inspect(x)
obj_inspect(x, expand = "character")

# Expand altrep to see underlying data
x <- 1:10
obj_inspect(x)
obj_inspect(x, expand = "altrep")

# Expand environmnets to see the underlying implementation details
e1 <- new.env(hash = FALSE, parent = emptyenv(), size = 3L)
e2 <- new.env(hash = TRUE, parent = emptyenv(), size = 3L)
e1$x <- e2$x <- 1:10

obj_inspect(e1)
obj_inspect(e1, expand = "environment")
obj_inspect(e2, expand = "environment")
}
